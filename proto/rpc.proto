import "nanopb.proto";
package barobo.rpc;

enum Status {
    OK = 0;
    /* nanopb failures */
    DECODING_FAILURE = 1;
    ENCODING_FAILURE = 2;
    /* ribbon-bridge logic error */
    PROTOCOL_ERROR = 3;
    /* interface version mismatch */
    INTERFACE_ERROR = 4;
    /* not connected to the request's origin */
    NOT_CONNECTED = 5;
    CONNECTION_REFUSED = 6;
    TIMED_OUT = 7;
    VERSION_MISMATCH = 8;
}

message VersionTriplet {
    required uint32 major = 1;
    required uint32 minor = 2;
    required uint32 patch = 3;
}

message Versions {
    required VersionTriplet rpc = 2;
    required VersionTriplet interface = 3;
}

message Request {
    enum Type {
        CONNECT = 0;
        DISCONNECT = 1;
        FIRE = 2;
    }

    message Fire {
        required uint32 id = 1; // component id
        required bytes payload = 2 [(nanopb).max_size = 128];
    }

    required Type type = 1;
    optional Fire fire = 3;
}

message ClientMessage {
    required uint32 id = 1; // request id
    required Request request = 2;
}

message Reply {
    enum Type {
        VERSIONS = 0;
        STATUS = 2;
        RESULT = 3;
    }

    message Status {
        required barobo.rpc.Status value = 1;
    }

    message Result {
        required uint32 id = 1; // The component id. The Proxy should be able
                                // to figure this out by keeping a map of
                                // request IDs, but duplicating it here makes
                                // implementation much easier.
                                // Update: the Asio implementation does not use this
        required bytes payload = 2 [(nanopb).max_size = 128];
    }


    required Type type = 1;
    optional Versions versions = 3;
    optional Status status = 4;
    optional Result result = 5;
}

message Broadcast {
    required uint32 id = 1;
    required bytes payload = 2 [(nanopb).max_size = 128];
}

message ServerMessage {
    enum Type {
        REPLY = 0;
        BROADCAST = 1;
    }

    required Type type = 1;
    optional Reply reply = 2;
    optional uint32 inReplyTo = 3;
    optional Broadcast broadcast = 4;
}