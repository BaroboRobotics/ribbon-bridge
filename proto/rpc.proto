package com.barobo.rpc;

// The basic RPC Message union
message Message {
    optional ToObject toObject = 1;
    optional FromObject fromObject = 2;
    optional Reply reply = 3;
}

// Spontaneous messages TO objects
message ToObject {
    enum Type {
        GET = 1;
        SET = 2;
        SUBSCRIBE_ATTRIBUTE = 3;
        UNSUBSCRIBE_ATTRIBUTE = 4;
        SUBSCRIBE_BROADCAST = 5;
        UNSUBSCRIBE_BROADCAST = 6;
        FIRE = 7;
    }

    required Type type = 1;
    required uint32 messageId = 2;

    // component type (attribute, method, or broadcast) is inferred from
    // message type
    // fixed32 instead of uint32 because it's a hash
    required fixed32 componentId = 5;

    // a single encoded value for SET, multiple encoded values for FIRE
    // null for GET, SUBSCRIBEs, and UNSUBSCRIBEs
    required bytes payload = 6;
}

// Spontaneous messages FROM objects
message FromObject {
    enum Type {
        ATTRIBUTE_UPDATE = 1;
        BROADCAST = 2;
    }

    required Type type = 1;

    // component type is inferred from message type
    required uint32 componentId = 4;

    // a single encoded value for ATTRIBUTE_UPDATE, multiple encoded values for
    // BROADCAST
    required bytes payload = 5;
}

enum Error {
    NO_SUCH_OBJECT = 1;
    NO_SUCH_INTERFACE = 2;
    NO_SUCH_COMPONENT = 3;
    ATTRIBUTE_IS_READONLY = 4;
    SUBSCRIPTION_FORBIDDEN = 5;
    DECODE_FAILURE = 6;
    BUFFER_OVERFLOW = 7;
}

// Replies (from objects)
// Scenarios:

//   client fires a fireAndForget method        NO Reply
//   client fires a method without output       Reply { type == OUT,
//                                                      payload.size == 0,
//                                                      NO rpcError }
//   client fires a method with output          Reply { type == OUT,
//                                                      payload.size > 0,
//                                                      NO rpcError }
//   client fires a method that fails           Reply { type == ERROR,
//                                                      payload.size > 0,
//                                                      NO rpcError }
//   client fires a method incorrectly (e.g.,   Reply { type == ERROR,
//   wrong type signature, no such object)              payload.size == 0,
//                                                      YES rpcError }

//   client gets an attribute                   Reply { type == OUT,
//                                                      payload.size > 0,
//                                                      NO rpcError }
//   client gets a nonexistent attribute        Reply { type == ERROR,
//                                                      payload.size == 0,
//                                                      YES rpcError }

//   client sets an attribute                   NO Reply
//   client sets a nonexistent attribute        Reply { type == ERROR,
//                                                      payload.size == 0,
//                                                      YES rpcError }
//   client sets an attribute incorrectly       Reply { type == ERROR,
//   (e.g., nonexistent attribute, readonly)            payload.size == 0
//                                                      YES rpcError }

//   client subscribes to an attribute          NO Reply
//   client subscribes to a noSubscriptions     Reply { type == ERROR,
//   attribute                                          payload.size == 0,
//                                                      YES rpcError }
message Reply {
    enum Type {
        OUT = 1;        // in reply to GET or FIRE
        ERROR = 2;      // in reply to SET, FIRE, SUBSCRIBEs
    }

    required uint32 inReplyToMessageId = 1;
    required Type type = 2;
    required bytes payload = 3;
    optional Error rpcError = 4;
}
