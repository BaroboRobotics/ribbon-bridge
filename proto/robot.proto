package com.barobo.Robot;

/* The three basic types of interface component are attributes, methods, and
 * broadcasts. Each component is defined by a unique message. Each component
 * will thus have a unique type when compiled into C/C++, which enables us to
 * use the messages as arguments to an overloaded handler function. By using an
 * overloaded function accepting a reference to one of these generated
 * structures, we eliminate a significant amount of boilerplate that would
 * otherwise have to be maintained in the implementation of an object with this
 * interface. */

//////////////////////////////////////////////////////////////////////////////
// Attributes

/* Attribute messages contain a single value. They can be serialized and used
 * as the payload for a ToObject SET message, a Reply OUT message, or a
 * FromObject ATTRIBUTE_UPDATE message. When used in a SET, the value
 * represents the desired new value of the attribute. When used in a Reply OUT
 * in response to a ToObject GET message, the value is the reported value of
 * the attribute. When used in a FromObject ATTRIBUTE_UPDATE, the value is the
 * updated value of the attribute. */

message motorPower {
    required uint32 value = 1;
}

//////////////////////////////////////////////////////////////////////////////
// Methods

/* Although message identifiers would typically begin with a capital letter, it
 * ultimately makes things more readable in the C++ implementation if we follow
 * conventional method identifier capitalization. That is why this is a 'move'
 * message instead of a 'Move' message, and likewise above with 'motorPower'
 * versus 'MotorPower'. Additionally, this allows the initial capital style to
 * be reserved for types unique to the com.barobo.Robot interface. */
message move {

    /* Methods have three different payload messages: one each for the input
     * parameters, output parameters, and error. The method component message
     * ('move' itself) will never be used as a payload, only its nested
     * messages. */

    /* The In message contains the input parameters, and is used as the payload
     * for a ToObject FIRE message. This message would only exist if the method
     * has input parameters. */
    message In {
        required float desiredAngle1 = 1;
        required float desiredAngle2 = 2;
        required float desiredAngle3 = 3;
    }


    message Output {
        /* The Out message contains the output parameters, and is used as the
         * payload for a Reply OUT message in response to a ToObject FIRE. This
         * message would only exist if the method has output parameters. */
        message Out {
            required float funFactor = 1;
        }

        /* The Error message contains the error code reportable by the method, and
         * is used as the payload for a Reply ERROR message in response to a
         * ToObject FIRE. This message would only exist if the method has error
         * codes. */
        message Error {
            enum Value {
                IN_USE = 0;
            }
            required Value value = 1;
        }

        optional Out out = 1;
        optional Error error = 2;
    }

    /* Since method component messages are never sent over the wire, it makes
     * no difference if these are optional are not. We could use the the
     * optional keyword here to generate has_* booleans which would help method
     * implementors signal an error state, but we should find a more elegant
     * way. */
    required In in = 1;
    required Output output = 2;
}

//////////////////////////////////////////////////////////////////////////////
// Broadcasts

/* Broadcast component messages contain the output parameters of the broadcast.
 * They can be used as the payload for a FromObject BROADCAST, and that is it.
 */
message buttonPress {
    required uint32 button = 1;
    required uint32 mask = 2;
}
